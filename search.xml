<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kubernetes Ingress Nginx Rewrite non-www to www</title>
      <link href="2020/01/14/Kubernetes-Ingress-Nginx-Rewrite-non-www-to-www/"/>
      <url>2020/01/14/Kubernetes-Ingress-Nginx-Rewrite-non-www-to-www/</url>
      
        <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>由于近期项目都开始面向全球用户，开始将前端部署配置起 CDN，踩了很多坑，这里记录一下关于 @ 域名 CNAME 解析与 MX 邮箱冲突的问题。</p><p>一般做法是直接将 @ 使用 A 解析到 IP，但这样就没法使用 CDN 了。</p><p>这是一个普遍存在的问题，参考 <a href="https://help.aliyun.com/knowledge_detail/39787.html" target="_blank" rel="noopener">阿里云文档</a>：</p><blockquote><p>按照RFC标准协议CNAME优先级最高，所以在解析请求过程中，会优先返回CNAME解析记录结果，这样设置的结果导致用户无法请求到MX记录，直接对客户的邮箱业务造成使用影响。所以对于这类情况，云解析DNS会通过记录冲突的提示方式，来帮助用户避免这种配置风险。</p></blockquote><p>阿里云的推荐做法是使用 <code>URL转发</code> 解决问题，比如强制跳转 $DOMAIN.com 到 www.$DOMAIN.com，测试通过，但不支持 https，即如果直接访问 <a href="https://domain.com" target="_blank" rel="noopener">https://domain.com</a> 不会进行跳转。</p><p>为此有两个解决思路：</p><ul><li>部一个前端项目，配置好证书和 @ 的解析，通过页面进行跳转</li><li>使用反向代理直接进行跳转</li></ul><p>这里使用反向代理进行处理，目前运行很完美。</p><h2 id="使用-Nginx-反向代理"><a href="#使用-Nginx-反向代理" class="headerlink" title="使用 Nginx 反向代理"></a>使用 Nginx 反向代理</h2><p>反向代理使用 Nginx，由于这个项目是跑在 Kubernetes 集群上的，使用了 <a href="https://kubernetes.github.io/ingress-nginx/" target="_blank" rel="noopener">ingress-nginx</a>，同时附上普通 nginx 的配置供参考。</p><p>假设域名为 $DOMAIN，请自行替换。</p><h3 id="Kubernetes-Ingress-Nginx"><a href="#Kubernetes-Ingress-Nginx" class="headerlink" title="Kubernetes Ingress Nginx"></a>Kubernetes Ingress Nginx</h3><ul><li>配置 YAML 文件</li></ul><p><code>rewrite.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rewrite</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">prod</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">letsencrypt-prod</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/configuration-snippet:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">rewrite</span> <span class="string">^/(.*)$</span> <span class="string">https://www.$DOMAIN.com/$1</span> <span class="string">permanent;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">$DOMAIN.com</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">rewrite</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">$DOMAIN.com</span></span><br></pre></td></tr></table></figure><p><em>注：这里同时使用了 letsencrypt 作为 cert-manager 进行 SSl 证书的自动化管理，namespace 也请按各人需求配置</em></p><ul><li>执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f rewrite.yaml</span><br></pre></td></tr></table></figure><h3 id="普通-Nginx-配置参考"><a href="#普通-Nginx-配置参考" class="headerlink" title="普通 Nginx 配置参考"></a>普通 Nginx 配置参考</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @ 跳转到 www</span></span><br><span class="line">server &#123;</span><br><span class="line">listen     80;</span><br><span class="line">server_name  <span class="variable">$DOMAIN</span>.com</span><br><span class="line">rewrite  ^/(.*)$  http://www.<span class="variable">$DOMAIN</span>.com/<span class="variable">$1</span> permanent;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen     80;</span><br><span class="line">server_name  www.<span class="variable">$DOMAIN</span>.com;</span><br><span class="line"><span class="comment"># 省略通用配置内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> K8s </tag>
            
            <tag> Ingress </tag>
            
            <tag> Nginx </tag>
            
            <tag> Rewrite </tag>
            
            <tag> 重写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Azure Kubernetes 配置踩坑</title>
      <link href="2019/12/24/Azure-Kubernetes-%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/"/>
      <url>2019/12/24/Azure-Kubernetes-%E9%85%8D%E7%BD%AE%E8%B8%A9%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>之前一直直接使用的虚拟机做为开发、测试甚至生产环境，使用的 Docker Compose 配置，毕竟自己不是运维，得过且过。</p><p>这次狠狠心再摸索一下 <a href="https://kubernetes.io" target="_blank" rel="noopener">Kubernetes</a> 做集群用于生产环境，记录一下踩坑的过程。</p><h2 id="Azure-Cloud"><a href="#Azure-Cloud" class="headerlink" title="Azure Cloud"></a>Azure Cloud</h2><p>正好团队现在有比较多的资源在 <a href="https://azure.com" target="_blank" rel="noopener">Azure</a> 国际版上，微软的文档也相对给力，所以直接使用了 Azure Kubernetes (AKS) 作为起点。</p><h3 id="创建-Kubernetes-集群"><a href="#创建-Kubernetes-集群" class="headerlink" title="创建 Kubernetes 集群"></a>创建 Kubernetes 集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ignore</span><br></pre></td></tr></table></figure><h3 id="使用-kubectl-连接到集群"><a href="#使用-kubectl-连接到集群" class="headerlink" title="使用 kubectl 连接到集群"></a>使用 kubectl 连接到集群</h3><ul><li>通过 az-cli 安装 kubectl</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az aks install-cli</span><br></pre></td></tr></table></figure><ul><li>通过 az-cli 连接集群</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az aks get-credentials --resource-group <span class="variable">$RESOURCE_GROUP</span> --name <span class="variable">$AKS_CLUSTER</span></span><br></pre></td></tr></table></figure><ul><li>验证集群连接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes</span><br></pre></td></tr></table></figure><h3 id="使用-Kubernetes-Dashboard"><a href="#使用-Kubernetes-Dashboard" class="headerlink" title="使用 Kubernetes Dashboard"></a>使用 Kubernetes Dashboard</h3><p>AKS 里已经包含了 Dashboard，无需手动安装，但有个权限需要配置</p><p>如果 AKS 集群使用 RBAC，则必须先创建 ClusterRoleBinding，然后才能正确访问仪表板。</p><ul><li>创建 ClusterRoleBinding 权限绑定</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create clusterrolebinding kubernetes-dashboard --clusterrole=cluster-admin --serviceaccount=kube-system:kubernetes-dashboard</span><br></pre></td></tr></table></figure><ul><li>启动 Dashboard 并访问</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az aks browse --resource-group <span class="variable">$RESOURCE_GROUP</span> --name <span class="variable">$AKS_CLUSTER</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是，本地会启动一个代理指向集群的 Dashboard，默认是 127.0.0.1:8001 进行访问。</p><p>端口 8001 容易被其他服务占用，比如 v2rayx。</p><h3 id="创建-Nginx-入口控制器"><a href="#创建-Nginx-入口控制器" class="headerlink" title="创建 Nginx 入口控制器"></a>创建 Nginx 入口控制器</h3><ul><li>获取 AKS 群集的资源组名称</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az aks show --resource-group <span class="variable">$RESOURCE_GROUP</span> --name <span class="variable">$AKS_CLUSTER</span> --query nodeResourceGroup -o tsv</span><br></pre></td></tr></table></figure><p>将会返回资源组名称 <code>$RESOURCE_GROUP_NAME</code>，格式一般为：<code>MC_myResourceGroup_myAKSCluster_eastus</code></p><ul><li>创建静态公共 IP 地址</li></ul><p>假设 <code>$AKS_IP_NAME</code> 值为 <code>myAKSPublicIP</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az network public-ip create --resource-group <span class="variable">$RESOURCE_GROUP_NAME</span> --name <span class="variable">$AKS_IP_NAME</span> --sku Standard --allocation-method static --query publicIp.ipAddress -o tsv</span><br></pre></td></tr></table></figure><p>成功后将返回 IP 地址 <code>$IP</code></p><ul><li>创建命名空间 Namespace</li></ul><p>假设 <code>$NAMESPACE</code> 值为 <code>ingress-basic</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create namespace <span class="variable">$NAMESPACE</span></span><br></pre></td></tr></table></figure><ul><li>创建 Nginx 控制器</li></ul><p>此处使用 <a href="https://helm.sh/" target="_blank" rel="noopener">Helm</a> 方式安装部署</p><p>当前创建两个 Nginx 的副本，可以通过 <code>--set controller.replicaCount=2</code> 修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ helm install nginx-ingress stable/nginx-ingress \</span><br><span class="line">    --namespace <span class="variable">$NAMESPACE</span> \</span><br><span class="line">    --<span class="built_in">set</span> controller.replicaCount=2 \</span><br><span class="line">    --<span class="built_in">set</span> controller.nodeSelector.<span class="string">"beta\.kubernetes\.io/os"</span>=linux \</span><br><span class="line">    --<span class="built_in">set</span> defaultBackend.nodeSelector.<span class="string">"beta\.kubernetes\.io/os"</span>=linux \</span><br><span class="line">    --<span class="built_in">set</span> controller.service.loadBalancerIP=<span class="string">"<span class="variable">$IP</span>"</span></span><br></pre></td></tr></table></figure><p>成功后将会返回 Nginx 控制器的使用 YAML 示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># An example Ingress that makes use of the controller:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www.example.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">serviceName:</span> <span class="string">exampleService</span></span><br><span class="line">              <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">  <span class="comment"># This section is only required if TLS is to be enabled for the Ingress</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">www.example.com</span></span><br><span class="line">        <span class="attr">secretName:</span> <span class="string">example-tls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-tls</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">tls.crt:</span> <span class="string">&lt;base64</span> <span class="string">encoded</span> <span class="string">cert&gt;</span></span><br><span class="line">  <span class="attr">tls.key:</span> <span class="string">&lt;base64</span> <span class="string">encoded</span> <span class="string">key&gt;</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">kubernetes.io/tls</span></span><br></pre></td></tr></table></figure><h3 id="配置-DNS-名称"><a href="#配置-DNS-名称" class="headerlink" title="配置 DNS 名称"></a>配置 DNS 名称</h3><p>此步骤用于 HTTPS 证书正常工作，为入口控制器 IP 配置 FQDN</p><ul><li>获取 IP 地址的资源 ID</li></ul><p>其中 <code>$IP</code> 为上文创建的静态 IP 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az network public-ip list --query <span class="string">"[?ipAddress!=null]|[?contains(ipAddress, '<span class="variable">$ip</span>')].[id]"</span> --output tsv</span><br></pre></td></tr></table></figure><p>成功后将返回 <code>$IPID</code></p><ul><li>更新 IP 地址的 DNS 名称</li></ul><p>假设 <code>$DNSNAME</code> 值为 <code>aks-ingress</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az network public-ip update --ids <span class="variable">$IPID</span> --dns-name <span class="variable">$DNSNAME</span></span><br></pre></td></tr></table></figure><h3 id="安装证书管理器"><a href="#安装证书管理器" class="headerlink" title="安装证书管理器"></a>安装证书管理器</h3><p>此步骤用于 HTTPS 证书管理，适用于启用了 RBAC 的集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install the CustomResourceDefinition resources separately</span></span><br><span class="line">kubectl apply --validate=<span class="literal">false</span> -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.11/deploy/manifests/00-crds.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the namespace for cert-manager</span></span><br><span class="line">kubectl create namespace cert-manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># Label the cert-manager namespace to disable resource validation</span></span><br><span class="line">kubectl label namespace cert-manager cert-manager.io/<span class="built_in">disable</span>-validation=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the Jetstack Helm repository</span></span><br><span class="line">helm repo add jetstack https://charts.jetstack.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update your local Helm chart repository cache</span></span><br><span class="line">helm repo update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the cert-manager Helm chart</span></span><br><span class="line">helm install cert-manager jetstack/cert-manager \</span><br><span class="line">  --namespace cert-manager \</span><br><span class="line">  --version v0.11.0</span><br></pre></td></tr></table></figure><h3 id="创建-CA-集群证书颁发者"><a href="#创建-CA-集群证书颁发者" class="headerlink" title="创建 CA 集群证书颁发者"></a>创建 CA 集群证书颁发者</h3><ul><li>创建 cluster-issuer.yaml</li></ul><p>此处直接使用 Let’s Encrypt 使用 <code>prod</code> 生产环境</p><p>若需使用 <code>staging</code> 环境，可以使用资源定义中的 <code>letsencrypt-staging</code> 和 <code>https://acme-staging-v02.api.letsencrypt.org/directory</code></p><p> letsencrypt-prod 和 <a href="https://acme-v02.api.letsencrypt.org/directory。" target="_blank" rel="noopener">https://acme-v02.api.letsencrypt.org/directory。</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1alpha2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">letsencrypt-prod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-basic</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">acme:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://acme-v02.api.letsencrypt.org/directory</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">z@benwk.com</span></span><br><span class="line">    <span class="attr">privateKeySecretRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">letsencrypt-prod</span></span><br><span class="line">    <span class="attr">solvers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">http01:</span></span><br><span class="line">        <span class="attr">ingress:</span></span><br><span class="line">          <span class="attr">class:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><ul><li>部署 YAML</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f cluster-issuer.yaml</span><br></pre></td></tr></table></figure><h3 id="运行演示应用程序"><a href="#运行演示应用程序" class="headerlink" title="运行演示应用程序"></a>运行演示应用程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install aks-helloworld azure-samples/aks-helloworld --namespace ingress-basic</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helm install ingress-demo azure-samples/aks-helloworld \</span><br><span class="line">    --namespace ingress-basic \</span><br><span class="line">    --<span class="built_in">set</span> title=<span class="string">"AKS Ingress Demo"</span> \</span><br><span class="line">    --<span class="built_in">set</span> serviceName=<span class="string">"ingress-demo"</span></span><br></pre></td></tr></table></figure><h3 id="创建入口路由"><a href="#创建入口路由" class="headerlink" title="创建入口路由"></a>创建入口路由</h3><ul><li>创建 hello-world-ingress.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-world-ingress</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-basic</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">letsencrypt-prod</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/$1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">demo-aks-ingress.10maker.com</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">tls-secret</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">demo-aks-ingress.10maker.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">aks-helloworld</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/(.*)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">ingress-demo</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/hello-world-two(/|$)(.*)</span></span><br></pre></td></tr></table></figure><ul><li>部署入口路由</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f hello-world-ingress.yaml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Azure </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> K8s </tag>
            
            <tag> 踩坑 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
