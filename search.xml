<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Getting Git to work with a proxy</title>
      <link href="2021/04/06/Getting-Git-to-work-with-a-proxy/"/>
      <url>2021/04/06/Getting-Git-to-work-with-a-proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>前期大部分的项目代码仓库都在 <a href="https://bitbucket.org" target="_blank" rel="noopener">Bitbucket</a> 上，直接使用了 Bitbucket 的 <a href="https://bitbucket.org/product/features/pipelines" target="_blank" rel="noopener">pipelines</a> 做 CI/CD。虽然贵了点，但还是挺方便的。</p><p>但随着我们自身 DevOps 需求的不断增加，我们也逐渐基于 Jenkins+Argo 搭建了一整套自己的 DevOps 平台。</p><p>同时由于 Bitbucket 经常网络抽风，所以从去年起我们逐步将代码迁移到了 <a href="https://github.com" target="_blank" rel="noopener">Github</a>。悲催的是，Github 也被 <a href="https://twitter.com/williamlong/status/1373096436187811842" target="_blank" rel="noopener">重点关照</a> 了……</p><blockquote><p>据 blocky 统计，Github 从 2 月 27 日开始至今都被中国屏蔽。</p></blockquote><p>开发团队小伙伴们更是苦不堪言，拉取/提交代码速度只有字节的痛苦可想而知。虽然团队已经购买了不少梯子，但在实际使用中又会因为不同协议和软件的问题，导致了挺多问题。</p><p>这里相对系统的记录一下通用配置和场景：</p><ul><li><del>搭建梯子</del></li><li>使用 Clash 客户端</li><li>终端使用代理</li><li>Git 使用代理</li><li>IDE 使用代理</li></ul><h2 id="搭建梯子"><a href="#搭建梯子" class="headerlink" title="搭建梯子"></a><del>搭建梯子</del></h2><p>搭建梯子的方式有很多，自建和购买都很方便，此处略过。</p><p>推荐词汇：<code>v2net</code>，<code>AAEX</code></p><h2 id="使用-Clash-客户端"><a href="#使用-Clash-客户端" class="headerlink" title="使用 Clash 客户端"></a>使用 Clash 客户端</h2><p>可以使用的客户端有很多，个人比较喜欢 Clash，在此就以 Clash 举例。</p><h3 id="安装客户端"><a href="#安装客户端" class="headerlink" title="安装客户端"></a>安装客户端</h3><p>Clash 在不同系统下需要下载不同的客户端，直接在 Github 的 release 中下载：</p><ul><li>Mac 客户端：<a href="https://github.com/yichengchen/clashX/releases" target="_blank" rel="noopener">https://github.com/yichengchen/clashX/releases</a></li><li>Windows 客户端：<a href="https://github.com/Fndroid/clash_for_windows_pkg/releases" target="_blank" rel="noopener">https://github.com/Fndroid/clash_for_windows_pkg/releases</a></li></ul><p>下载安装后设置为开机启动即可。</p><h3 id="配置梯子"><a href="#配置梯子" class="headerlink" title="配置梯子"></a>配置梯子</h3><p>一般而言，购买梯子后会提供不同的订阅方式给不同的客户端用户，常用的包含 SS/SSR、Clash 和 Surge 等等。我们这里选择 Clash 的链接复制.</p><p>如果是 Mac 客户端，则通过以下路径打开配置：<code>Config - Remote Config - Manage - Add</code>，Url 中粘贴订阅链接，Name 可以自定义方便后面选择。</p><p>如果是 Windows 客户端，则通过一下路径打开配置：<code>Dashboard - Profiles - Download from a URL</code>，粘贴订阅链接并下载，</p><p>添加完成后，打开 Dashboard - Proxies 可以看到当前订阅的所有服务器节点。</p><h3 id="测试服务器"><a href="#测试服务器" class="headerlink" title="测试服务器"></a>测试服务器</h3><p>由于节点服务器一般不够稳定，可以通过 Speed Test / Benchmark 功能测试节点连接情况，选择最优节点进行连接。</p><p>选择好节点后，打开 <code>使用系统代理</code> 或 <code>Set as system proxy</code> 即可实现科学上网。</p><p><em>注：在 Proxy Mode 中有三个选项 Rule、Global 和 Direct，分别代表按照规则使用代理、全局使用代理和不实用代理。因此，可以长期将 Clash 设置为系统代理并通过以上三个选项来控制本机的网络使用。</em></p><h3 id="配置规则（组）"><a href="#配置规则（组）" class="headerlink" title="配置规则（组）"></a>配置规则（组）</h3><p>一般而言，Proxy Mode 选择 Rule 即可，默认配置会自动判断哪些流程需要走代理。如果遇到一些抽风，可以临时打开 Global 来执行代理。</p><p>但有时我们也希望可以精细配置，Mac 客户端可以通过以下路径打开配置文件所在目录：<code>Config - open local config Folder</code>，找到正在使用的配置文件并打开。Windows 客户端更方便一些，既可以通过以下路径：<code>Dashboard - Profiles</code> 选中配置文件后 <code>Edit in text mode</code>，也可以直接 <code>Edit rules</code> 进行可视化编辑。</p><p>配置文件中会包含以下配置，可以实现自定义：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点配置</span></span><br><span class="line"><span class="attr">proxies:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">测试节点1.0</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ss</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">cn-1.benwk.io</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">560</span></span><br><span class="line">  <span class="attr">cipher:</span> <span class="string">rc4-md5</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">XXXXXXXXXXXXXXXXXX</span></span><br><span class="line">  <span class="attr">plugin:</span> <span class="string">obfs</span></span><br><span class="line">  <span class="attr">plugin-opts:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">13442</span><span class="string">-Y0j1J96peu.download.microsoft.com</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">测试节点2.0</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ss</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">cn-2.benwk.io</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">560</span></span><br><span class="line">  <span class="attr">cipher:</span> <span class="string">rc4-md5</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">XXXXXXXXXXXXXXXXXX</span></span><br><span class="line">  <span class="attr">plugin:</span> <span class="string">obfs</span></span><br><span class="line">  <span class="attr">plugin-opts:</span></span><br><span class="line">    <span class="attr">mode:</span> <span class="string">http</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">13442</span><span class="string">-Y0j1J96peu.download.microsoft.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代理组配置，用于自定义代理组来优化流量路径。</span></span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Default</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">       <span class="string">["测试节点1.0","测试节点2.0"]</span></span><br><span class="line">  <span class="comment"># 配置 Youtube 组用于将所有 Youtube 流量指向对应的优化节点</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">YouTube</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="string">["Default","测试节点1.0","测试节点2.0"]</span></span><br><span class="line">  <span class="comment"># 配置 BiliBili 组用于将所有 BiliBili 流量跳过代理直连网络</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">BiliBili</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="string">["DIRECT","代理","测试节点1.0","测试节点2.0"]</span></span><br><span class="line">  <span class="comment"># 配置 规则外 组用于将所有其他流量指向对应节点，或直接指向 代理 组</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">规则外路由选择</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">select</span></span><br><span class="line">    <span class="attr">proxies:</span></span><br><span class="line">      <span class="string">["Default","DIRECT","测试节点1.0","测试节点2.0"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 规则配置，用于通过规则过滤将流量应用代理或代理组</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"> <span class="comment"># 域名后缀匹配，指向直连</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,local,DIRECT</span></span><br><span class="line"> <span class="comment"># IPv4 匹配</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">IP-CIDR,192.168.0.0/16,DIRECT,no-resolve</span></span><br><span class="line"> <span class="comment"># IPv6 匹配</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">IP-CIDR6,fd00::/8,DIRECT,no-resolve</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,17gouwuba.com,REJECT</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">IP-CIDR,39.107.15.115/32,REJECT,no-resolve</span></span><br><span class="line"> <span class="comment"># 域名关键字匹配，指向 Youtube 代理组</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-KEYWORD,youtube,YouTube</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,youtu.be,YouTube</span></span><br><span class="line"> <span class="comment"># 域名后缀匹配，指向 Default 代理组</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,himalaya.com,Default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>其中规则支持以下类型：</p><ul><li>DOMAIN-SUFFIX：域名后缀匹配</li><li>DOMAIN：域名匹配</li><li>DOMAIN-KEYWORD：域名关键字匹配</li><li>IP-CIDR：IP 段匹配</li><li>SRC-IP-CIDR：源 IP 段匹配</li><li>GEOIP：GEOIP 数据库（国家代码）匹配</li><li>DST-PORT：目标端口匹配</li><li>SRC-PORT：源端口匹配</li><li>PROCESS-NAME：源进程名匹配</li><li>RULE-SET：Rule Provider 规则匹配</li><li>MATCH：全匹配</li></ul><h3 id="配置代理端口"><a href="#配置代理端口" class="headerlink" title="配置代理端口"></a>配置代理端口</h3><p>Clash 也自带了代理端口的配置，允许其他程序通过代理端口访问网络，默认端口配置是 <code>7890</code>，为 HTTP 和 SOCKS5 的混合端口。</p><ul><li>Mac 客户端可以通过 <code>Dashboard - Setting - Mixed proxy port</code> 进行配置。</li><li>Windows 客户端可以通过 <code>Dashboard - General - Port</code> 进行配置。</li></ul><p><em>注：此处不建议修改，容易造成端口冲突</em></p><h2 id="终端使用代理"><a href="#终端使用代理" class="headerlink" title="终端使用代理"></a>终端使用代理</h2><p>一般而言，终端 Terminal 如果想使用代理会需要独立的配置，Clash 也比较方便的生成了命令。</p><p>Mac 客户端可以在菜单栏点击 <code>Copy shell command</code> 来复制终端代理命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Bash</span></span><br><span class="line">$ <span class="built_in">export</span> https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>Windows 客户端可以通过 <code>Dahsboard - General - Port</code> 点击终端图标进行各种终端代理命令的复制。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Powershell</span></span><br><span class="line"><span class="variable">$</span> <span class="variable">$Env:http_proxy</span>=<span class="string">"http://127.0.0.1:7890"</span>;<span class="variable">$Env:https_proxy</span>=<span class="string">"http://127.0.0.1:7890"</span></span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">REM CMD</span></span><br><span class="line">$ <span class="built_in">set</span> http_proxy=http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">7890</span> &amp; <span class="built_in">set</span> https_proxy=http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">7890</span></span><br></pre></td></tr></table></figure><p>我们也可以将命令配置成别名作为快捷使用，以 Mac 下的 ohmyzsh 为例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">$ vi ~/.zshrc</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在文件尾部添加</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 大多数情况可以直接使用 socks5 协议</span></span><br><span class="line"><span class="built_in">alias</span> setproxy=<span class="string">"export all_proxy=socks5://127.0.0.1:7890"</span></span><br><span class="line"><span class="comment"># 对于有些工具会禁止使用 socks5，可以切换为 http 协议</span></span><br><span class="line"><span class="built_in">alias</span> setproxyhttp=<span class="string">"export all_proxy=http://127.0.0.1:7890"</span></span><br><span class="line"><span class="comment"># 移除所有代理配置，恢复直连</span></span><br><span class="line"><span class="built_in">alias</span> unsetproxy=<span class="string">"unset all_proxy"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存后执行</span></span><br><span class="line">$ <span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure><p>这样我们就可以直接使用 <code>setproxy</code>、<code>setproxyhttp</code> 和 <code>unsetproxy</code> 来控制终端中的代理配置。</p><h2 id="Git-使用代理"><a href="#Git-使用代理" class="headerlink" title="Git 使用代理"></a>Git 使用代理</h2><p>在 Git 的使用上，每个人的使用途径和软件都会有比较大的差异。因此，这里我们只在一些常规的用法上举例说明如何让 Git 流量走代理路径。</p><h3 id="使用-git-config"><a href="#使用-git-config" class="headerlink" title="使用 git config"></a>使用 git config</h3><p>大多数教程中使用 <code>git config</code> 命令来配置代理，但不知道什么原因我自己没有成功。这里只记录一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过 http 端口配置</span></span><br><span class="line">$ git config --global http.proxy <span class="string">'http://127.0.0.1:7890'</span></span><br><span class="line">$ git config --global https.proxy <span class="string">'http://127.0.0.1:7890'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 socks5 端口位置</span></span><br><span class="line">$ git config --global http.proxy <span class="string">'socks5://127.0.0.1:7890'</span></span><br><span class="line">$ git config --global https.proxy <span class="string">'socks5://127.0.0.1:7890'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 取消 git 的代理配置</span></span><br><span class="line">$ git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">$ git config --global --<span class="built_in">unset</span> https.proxy</span><br></pre></td></tr></table></figure><h3 id="使用-SSH-协议"><a href="#使用-SSH-协议" class="headerlink" title="使用 SSH 协议"></a>使用 SSH 协议</h3><p>个人比较习惯使用 SSH 协议使用 Git，对于 SSH 的配置这里不再赘述，可以参考 <a href="https://docs.github.com/cn/github/authenticating-to-github/connecting-to-github-with-ssh" target="_blank" rel="noopener">Github SSH 配置文档</a>。</p><p>首先验证本机 SSH 是否有权限访问仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 验证 Github</span></span><br><span class="line">$ ssh git@github.com</span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证 Bitbucket</span></span><br><span class="line">$ ssh git@bitbucket.org</span><br></pre></td></tr></table></figure><p>返回成功信息即配置成功，接着打开 SSH 的配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开或新建 SSH 配置文件</span></span><br><span class="line">$ vi ~/.ssh/config</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">  AddKeysToAgent yes</span><br><span class="line">  UseKeychain yes</span><br><span class="line">  IdentityFile ~&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line"></span><br><span class="line">Host github.com</span><br><span class="line">  User git</span><br><span class="line">  ProxyCommand nc -x 127.0.0.1:7890 %h %p</span><br><span class="line"></span><br><span class="line">Host bitbucket.org</span><br><span class="line">  User git</span><br><span class="line">  ProxyCommand nc -x 127.0.0.1:7890 %h %p</span><br><span class="line"></span><br><span class="line">Host benwk-io</span><br><span class="line">  HostName xxx.xx.xx.xxx</span><br><span class="line">  User root</span><br><span class="line">  Port 22</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 保存后立即生效</span></span><br></pre></td></tr></table></figure><p>其中：</p><ul><li>Host * 段落是访问所有服务器 SSH 密钥配置</li><li>Host github.com 段落是配置代理访问 Github</li><li>Host bitbucket.org 段落是配置代理访问 Bitbucket</li><li>Host benwk-io 段落是自定义访问服务器</li></ul><p><em>注：在节点服务器出现异常时，可以直接设置 Clash 直连，避免频繁修改 SSH 这里的 config 文件</em></p><h2 id="IDE-使用代理"><a href="#IDE-使用代理" class="headerlink" title="IDE 使用代理"></a>IDE 使用代理</h2><p>有些小伙伴也会使用编辑器插件或 IDE 自带工具进行 Git 管理，这里只记录一下常用的 VS Code 和 Jetbrains 的配置方法。</p><h3 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h3><p>打开 VS Code 的 settings.json 并添加：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"http.proxy"</span>: <span class="string">"http://127.0.0.1:7890"</span>,</span><br><span class="line">  <span class="attr">"https.proxy"</span>: <span class="string">"http://127.0.0.1:7890"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>保存后即可生效。</p><h3 id="Jetbrains"><a href="#Jetbrains" class="headerlink" title="Jetbrains"></a>Jetbrains</h3><p>所有 Jetbrains 系列软件都是类似的配置方法，包括 IDEA、WebStorm、PyCharm 和 Android Studio 等等。它们都是需要独立配置的，包括 Toolbox 也可以独立配置代理。</p><p>IDE 里所有的配置都可以通过 <code>Preference - Appearance &amp; Behavior - System Settings - HTTP Proxy - Manual proxy configuration</code> 设置。</p><p>同样可以选择 HTTP 或 SOCK5，<code>Host name</code> 都是 <code>127.0.0.1</code>，<code>Port number</code> 是 <code>7890</code>。</p><p>这里也可以设置 <code>No proxy for</code> 来过滤一些流量不走代理，不过如果我们已经在 Clash 配置过一些规则，这里不用重复设置。</p><p>对于 Toolbox 则在设置中配置 <code>127.0.0.1:7890</code> 即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Proxy </tag>
            
            <tag> Clash </tag>
            
            <tag> Git </tag>
            
            <tag> 代理 </tag>
            
            <tag> 翻墙 </tag>
            
            <tag> 科学上网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kubernetes Ingress Nginx Rewrite non-www to www</title>
      <link href="2020/01/14/Kubernetes-Ingress-Nginx-Rewrite-non-www-to-www/"/>
      <url>2020/01/14/Kubernetes-Ingress-Nginx-Rewrite-non-www-to-www/</url>
      
        <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>由于近期项目都开始面向全球用户，开始将前端部署配置起 CDN，踩了很多坑，这里记录一下关于 @ 域名 CNAME 解析与 MX 邮箱冲突的问题。</p><p>一般做法是直接将 @ 使用 A 解析到 IP，但这样就没法使用 CDN 了。</p><p>这是一个普遍存在的问题，参考 <a href="https://help.aliyun.com/knowledge_detail/39787.html" target="_blank" rel="noopener">阿里云文档</a>：</p><blockquote><p>按照RFC标准协议CNAME优先级最高，所以在解析请求过程中，会优先返回CNAME解析记录结果，这样设置的结果导致用户无法请求到MX记录，直接对客户的邮箱业务造成使用影响。所以对于这类情况，云解析DNS会通过记录冲突的提示方式，来帮助用户避免这种配置风险。</p></blockquote><p>阿里云的推荐做法是使用 <code>URL转发</code> 解决问题，比如强制跳转 $DOMAIN.com 到 www.$DOMAIN.com，测试通过，但不支持 https，即如果直接访问 <a href="https://domain.com" target="_blank" rel="noopener">https://domain.com</a> 不会进行跳转。</p><p>为此有两个解决思路：</p><ul><li>部一个前端项目，配置好证书和 @ 的解析，通过页面进行跳转</li><li>使用反向代理直接进行跳转</li></ul><p>这里使用反向代理进行处理，目前运行很完美。</p><h2 id="使用-Nginx-反向代理"><a href="#使用-Nginx-反向代理" class="headerlink" title="使用 Nginx 反向代理"></a>使用 Nginx 反向代理</h2><p>反向代理使用 Nginx，由于这个项目是跑在 Kubernetes 集群上的，使用了 <a href="https://kubernetes.github.io/ingress-nginx/" target="_blank" rel="noopener">ingress-nginx</a>，同时附上普通 nginx 的配置供参考。</p><p>假设域名为 $DOMAIN，请自行替换。</p><h3 id="Kubernetes-Ingress-Nginx"><a href="#Kubernetes-Ingress-Nginx" class="headerlink" title="Kubernetes Ingress Nginx"></a>Kubernetes Ingress Nginx</h3><ul><li>配置 YAML 文件</li></ul><p><code>rewrite.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">rewrite</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">prod</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">letsencrypt-prod</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/configuration-snippet:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">rewrite</span> <span class="string">^/(.*)$</span> <span class="string">https://www.$DOMAIN.com/$1</span> <span class="string">permanent;</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">$DOMAIN.com</span></span><br><span class="line">      <span class="attr">secretName:</span> <span class="string">rewrite</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">$DOMAIN.com</span></span><br></pre></td></tr></table></figure><p><em>注：这里同时使用了 letsencrypt 作为 cert-manager 进行 SSl 证书的自动化管理，namespace 也请按各人需求配置</em></p><ul><li>执行命令</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f rewrite.yaml</span><br></pre></td></tr></table></figure><h3 id="普通-Nginx-配置参考"><a href="#普通-Nginx-配置参考" class="headerlink" title="普通 Nginx 配置参考"></a>普通 Nginx 配置参考</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @ 跳转到 www</span></span><br><span class="line">server &#123;</span><br><span class="line">listen     80;</span><br><span class="line">server_name  <span class="variable">$DOMAIN</span>.com</span><br><span class="line">rewrite  ^/(.*)$  http://www.<span class="variable">$DOMAIN</span>.com/<span class="variable">$1</span> permanent;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen     80;</span><br><span class="line">server_name  www.<span class="variable">$DOMAIN</span>.com;</span><br><span class="line"><span class="comment"># 省略通用配置内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
            <tag> K8s </tag>
            
            <tag> Ingress </tag>
            
            <tag> Nginx </tag>
            
            <tag> Rewrite </tag>
            
            <tag> 重写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Azure Kubernetes Configuration</title>
      <link href="2019/12/24/Azure-Kubernetes-Configuration/"/>
      <url>2019/12/24/Azure-Kubernetes-Configuration/</url>
      
        <content type="html"><![CDATA[<h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>之前一直直接使用的虚拟机做为开发、测试甚至生产环境，使用的 Docker Compose 配置，毕竟自己不是运维，得过且过。</p><p>这次狠狠心再摸索一下 <a href="https://kubernetes.io" target="_blank" rel="noopener">Kubernetes</a> 做集群用于生产环境，记录一下踩坑的过程。</p><h2 id="Azure-Cloud"><a href="#Azure-Cloud" class="headerlink" title="Azure Cloud"></a>Azure Cloud</h2><p>正好团队现在有比较多的资源在 <a href="https://azure.com" target="_blank" rel="noopener">Azure</a> 国际版上，微软的文档也相对给力，所以直接使用了 Azure Kubernetes (AKS) 作为起点。</p><h3 id="创建-Kubernetes-集群"><a href="#创建-Kubernetes-集群" class="headerlink" title="创建 Kubernetes 集群"></a>创建 Kubernetes 集群</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ignore</span><br></pre></td></tr></table></figure><h3 id="使用-kubectl-连接到集群"><a href="#使用-kubectl-连接到集群" class="headerlink" title="使用 kubectl 连接到集群"></a>使用 kubectl 连接到集群</h3><ul><li>通过 az-cli 安装 kubectl</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az aks install-cli</span><br></pre></td></tr></table></figure><ul><li>通过 az-cli 连接集群</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az aks get-credentials --resource-group <span class="variable">$RESOURCE_GROUP</span> --name <span class="variable">$AKS_CLUSTER</span></span><br></pre></td></tr></table></figure><ul><li>验证集群连接</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl get nodes</span><br></pre></td></tr></table></figure><h3 id="使用-Kubernetes-Dashboard"><a href="#使用-Kubernetes-Dashboard" class="headerlink" title="使用 Kubernetes Dashboard"></a>使用 Kubernetes Dashboard</h3><p>AKS 里已经包含了 Dashboard，无需手动安装，但有个权限需要配置</p><p>如果 AKS 集群使用 RBAC，则必须先创建 ClusterRoleBinding，然后才能正确访问仪表板。</p><ul><li>创建 ClusterRoleBinding 权限绑定</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create clusterrolebinding kubernetes-dashboard --clusterrole=cluster-admin --serviceaccount=kube-system:kubernetes-dashboard</span><br></pre></td></tr></table></figure><ul><li>启动 Dashboard 并访问</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az aks browse --resource-group <span class="variable">$RESOURCE_GROUP</span> --name <span class="variable">$AKS_CLUSTER</span></span><br></pre></td></tr></table></figure><p>这里需要注意的是，本地会启动一个代理指向集群的 Dashboard，默认是 127.0.0.1:8001 进行访问。</p><p>端口 8001 容易被其他服务占用，比如 v2rayx。</p><h3 id="创建-Nginx-入口控制器"><a href="#创建-Nginx-入口控制器" class="headerlink" title="创建 Nginx 入口控制器"></a>创建 Nginx 入口控制器</h3><ul><li>获取 AKS 群集的资源组名称</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az aks show --resource-group <span class="variable">$RESOURCE_GROUP</span> --name <span class="variable">$AKS_CLUSTER</span> --query nodeResourceGroup -o tsv</span><br></pre></td></tr></table></figure><p>将会返回资源组名称 <code>$RESOURCE_GROUP_NAME</code>，格式一般为：<code>MC_myResourceGroup_myAKSCluster_eastus</code></p><ul><li>创建静态公共 IP 地址</li></ul><p>假设 <code>$AKS_IP_NAME</code> 值为 <code>myAKSPublicIP</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az network public-ip create --resource-group <span class="variable">$RESOURCE_GROUP_NAME</span> --name <span class="variable">$AKS_IP_NAME</span> --sku Standard --allocation-method static --query publicIp.ipAddress -o tsv</span><br></pre></td></tr></table></figure><p>成功后将返回 IP 地址 <code>$IP</code></p><ul><li>创建命名空间 Namespace</li></ul><p>假设 <code>$NAMESPACE</code> 值为 <code>ingress-basic</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl create namespace <span class="variable">$NAMESPACE</span></span><br></pre></td></tr></table></figure><ul><li>创建 Nginx 控制器</li></ul><p>此处使用 <a href="https://helm.sh/" target="_blank" rel="noopener">Helm</a> 方式安装部署</p><p>当前创建两个 Nginx 的副本，可以通过 <code>--set controller.replicaCount=2</code> 修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ helm install nginx-ingress stable/nginx-ingress \</span><br><span class="line">    --namespace <span class="variable">$NAMESPACE</span> \</span><br><span class="line">    --<span class="built_in">set</span> controller.replicaCount=2 \</span><br><span class="line">    --<span class="built_in">set</span> controller.nodeSelector.<span class="string">"beta\.kubernetes\.io/os"</span>=linux \</span><br><span class="line">    --<span class="built_in">set</span> defaultBackend.nodeSelector.<span class="string">"beta\.kubernetes\.io/os"</span>=linux \</span><br><span class="line">    --<span class="built_in">set</span> controller.service.loadBalancerIP=<span class="string">"<span class="variable">$IP</span>"</span></span><br></pre></td></tr></table></figure><p>成功后将会返回 Nginx 控制器的使用 YAML 示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># An example Ingress that makes use of the controller:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">www.example.com</span></span><br><span class="line">      <span class="attr">http:</span></span><br><span class="line">        <span class="attr">paths:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">              <span class="attr">serviceName:</span> <span class="string">exampleService</span></span><br><span class="line">              <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">            <span class="attr">path:</span> <span class="string">/</span></span><br><span class="line">  <span class="comment"># This section is only required if TLS is to be enabled for the Ingress</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">www.example.com</span></span><br><span class="line">        <span class="attr">secretName:</span> <span class="string">example-tls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If TLS is enabled for the Ingress, a Secret containing the certificate and key must also be provided:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Secret</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">example-tls</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">foo</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">tls.crt:</span> <span class="string">&lt;base64</span> <span class="string">encoded</span> <span class="string">cert&gt;</span></span><br><span class="line">  <span class="attr">tls.key:</span> <span class="string">&lt;base64</span> <span class="string">encoded</span> <span class="string">key&gt;</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">kubernetes.io/tls</span></span><br></pre></td></tr></table></figure><h3 id="配置-DNS-名称"><a href="#配置-DNS-名称" class="headerlink" title="配置 DNS 名称"></a>配置 DNS 名称</h3><p>此步骤用于 HTTPS 证书正常工作，为入口控制器 IP 配置 FQDN</p><ul><li>获取 IP 地址的资源 ID</li></ul><p>其中 <code>$IP</code> 为上文创建的静态 IP 地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az network public-ip list --query <span class="string">"[?ipAddress!=null]|[?contains(ipAddress, '<span class="variable">$ip</span>')].[id]"</span> --output tsv</span><br></pre></td></tr></table></figure><p>成功后将返回 <code>$IPID</code></p><ul><li>更新 IP 地址的 DNS 名称</li></ul><p>假设 <code>$DNSNAME</code> 值为 <code>aks-ingress</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ az network public-ip update --ids <span class="variable">$IPID</span> --dns-name <span class="variable">$DNSNAME</span></span><br></pre></td></tr></table></figure><h3 id="安装证书管理器"><a href="#安装证书管理器" class="headerlink" title="安装证书管理器"></a>安装证书管理器</h3><p>此步骤用于 HTTPS 证书管理，适用于启用了 RBAC 的集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Install the CustomResourceDefinition resources separately</span></span><br><span class="line">kubectl apply --validate=<span class="literal">false</span> -f https://raw.githubusercontent.com/jetstack/cert-manager/release-0.11/deploy/manifests/00-crds.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the namespace for cert-manager</span></span><br><span class="line">kubectl create namespace cert-manager</span><br><span class="line"></span><br><span class="line"><span class="comment"># Label the cert-manager namespace to disable resource validation</span></span><br><span class="line">kubectl label namespace cert-manager cert-manager.io/<span class="built_in">disable</span>-validation=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add the Jetstack Helm repository</span></span><br><span class="line">helm repo add jetstack https://charts.jetstack.io</span><br><span class="line"></span><br><span class="line"><span class="comment"># Update your local Helm chart repository cache</span></span><br><span class="line">helm repo update</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the cert-manager Helm chart</span></span><br><span class="line">helm install cert-manager jetstack/cert-manager \</span><br><span class="line">  --namespace cert-manager \</span><br><span class="line">  --version v0.11.0</span><br></pre></td></tr></table></figure><h3 id="创建-CA-集群证书颁发者"><a href="#创建-CA-集群证书颁发者" class="headerlink" title="创建 CA 集群证书颁发者"></a>创建 CA 集群证书颁发者</h3><ul><li>创建 cluster-issuer.yaml</li></ul><p>此处直接使用 Let’s Encrypt 使用 <code>prod</code> 生产环境</p><p>若需使用 <code>staging</code> 环境，可以使用资源定义中的 <code>letsencrypt-staging</code> 和 <code>https://acme-staging-v02.api.letsencrypt.org/directory</code></p><p> letsencrypt-prod 和 <a href="https://acme-v02.api.letsencrypt.org/directory。" target="_blank" rel="noopener">https://acme-v02.api.letsencrypt.org/directory。</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">cert-manager.io/v1alpha2</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterIssuer</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">letsencrypt-prod</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-basic</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">acme:</span></span><br><span class="line">    <span class="attr">server:</span> <span class="string">https://acme-v02.api.letsencrypt.org/directory</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">z@benwk.com</span></span><br><span class="line">    <span class="attr">privateKeySecretRef:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">letsencrypt-prod</span></span><br><span class="line">    <span class="attr">solvers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">http01:</span></span><br><span class="line">        <span class="attr">ingress:</span></span><br><span class="line">          <span class="attr">class:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><ul><li>部署 YAML</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f cluster-issuer.yaml</span><br></pre></td></tr></table></figure><h3 id="运行演示应用程序"><a href="#运行演示应用程序" class="headerlink" title="运行演示应用程序"></a>运行演示应用程序</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install aks-helloworld azure-samples/aks-helloworld --namespace ingress-basic</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">helm install ingress-demo azure-samples/aks-helloworld \</span><br><span class="line">    --namespace ingress-basic \</span><br><span class="line">    --<span class="built_in">set</span> title=<span class="string">"AKS Ingress Demo"</span> \</span><br><span class="line">    --<span class="built_in">set</span> serviceName=<span class="string">"ingress-demo"</span></span><br></pre></td></tr></table></figure><h3 id="创建入口路由"><a href="#创建入口路由" class="headerlink" title="创建入口路由"></a>创建入口路由</h3><ul><li>创建 hello-world-ingress.yaml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">extensions/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Ingress</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">hello-world-ingress</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ingress-basic</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">kubernetes.io/ingress.class:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">cert-manager.io/cluster-issuer:</span> <span class="string">letsencrypt-prod</span></span><br><span class="line">    <span class="attr">nginx.ingress.kubernetes.io/rewrite-target:</span> <span class="string">/$1</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">tls:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">demo-aks-ingress.10maker.com</span></span><br><span class="line">    <span class="attr">secretName:</span> <span class="string">tls-secret</span></span><br><span class="line">  <span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">host:</span> <span class="string">demo-aks-ingress.10maker.com</span></span><br><span class="line">    <span class="attr">http:</span></span><br><span class="line">      <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">aks-helloworld</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/(.*)</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">backend:</span></span><br><span class="line">          <span class="attr">serviceName:</span> <span class="string">ingress-demo</span></span><br><span class="line">          <span class="attr">servicePort:</span> <span class="number">80</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">/hello-world-two(/|$)(.*)</span></span><br></pre></td></tr></table></figure><ul><li>部署入口路由</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ kubectl apply -f hello-world-ingress.yaml</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Azure </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> K8s </tag>
            
            <tag> 踩坑 </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
